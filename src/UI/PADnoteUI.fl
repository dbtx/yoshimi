# data file for the Fltk User Interface Designer (fluid)
version 1.0304
header_name {.h}
code_name {.cc}
comment {PADNoteUI.h} {not_in_source in_header
}

comment {PADNoteUI.cc} {in_source not_in_header
}

comment {Original ZynAddSubFX author Nasca Octavian Paul
Copyright (C) 2002-2005 Nasca Octavian Paul
Copyright 2009-2011, Alan Calvert
Copyright 2015-2016, Will Godfrey

This file is part of yoshimi, which is free software: you can redistribute
it and/or modify it under the terms of the GNU Library General Public
License as published by the Free Software Foundation; either version 2 of
the License, or (at your option) any later version.

yoshimi is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.   See the GNU General Public License (version 2 or
later) for more details.

You should have received a copy of the GNU General Public License along with
yoshimi; if not, write to the Free Software Foundation, Inc., 51 Franklin
Street, Fifth Floor, Boston, MA  02110-1301, USA.

This file is derivative of ZynAddSubFX original code

Modified March 2017
} {in_source in_header
}

decl {\#include <FL/Fl_Box.H>
    \#include <FL/Fl_Group.H>
    \#include <FL/Fl_File_Chooser.H>
    \#include <FL/fl_draw.H>
    \#include "Params/PADnoteParameters.h"
    \#include "Misc/MiscFuncs.h"
    \#include "UI/MiscGui.h"
    \#include "PresetsUI.h"
    \#include "UI/WidgetPDial.h"
    \#include "EnvelopeUI.h"
    \#include "LFOUI.h"
    \#include "FilterUI.h"} {private global
}

decl {\#include "Misc/SynthHelper.h"
    \#include "ResonanceUI.h"
    \#include "OscilGenUI.h"} {public global
}

decl {\#include "MasterUI.h"} {private global
}

class PADnoteHarmonicProfile {: {public Fl_Box}
} {
  Function {PADnoteHarmonicProfile(int x,int y, int w, int h, const char *label=0):Fl_Box(x,y,w,h,label)} {} {
    code {pars=NULL;} {}
  }
  Function {init(PADnoteParameters *pars)} {} {
    code {this->pars=pars;} {}
  }
  Function {draw()} {} {
    code {//
        int ox = x(), oy = y(), lx =w (), ly = h();
        if (!visible()) return;
        float smps[lx];

        float realbw = pars->getprofile(smps,lx);
        bool active = active_r();

        //draw the equivalent bandwidth
        if (active)
            fl_color(220,220,220);
        else
            fl_color(160,165,165);
        fl_line_style(0);
        int rbw = (int)(realbw * (lx - 1.0) / 2.0);
        for (int i = lx / 2 - rbw; i < (lx / 2 + rbw); i++)
            fl_line(ox+i, oy, ox+i, oy + ly - 1);

        fl_line_style(0);
        if (active)
            fl_color(200, 200, 200);
        else
            fl_color(160, 160, 160);
        for (int i = 1; i < 10; i++)
        {
            int kx = (int)(lx / 10.0 * i);
            fl_line(ox + kx, oy, ox + kx, oy + ly - 1);
        }
        for (int i = 1; i < 5; i++)
        {
            int ky = (int)(ly / 5.0 * i);
            fl_line(ox, oy + ly - ky, ox + lx, oy + ly - ky - 1);
        }

        fl_color(120, 120, 120);
        fl_line_style(FL_DOT);
        fl_line(ox + lx / 2, oy, ox + lx / 2, oy + ly);

        //draw the graph
        fl_line_style(0);
        int old = 0;
        for (int i = 0; i < lx; i++)
        {
            int val = (int) ((ly - 2) * smps[i]);
            if (active)
                fl_color(180, 210, 240);
            else
                fl_color(150, 150, 155);
            fl_line(ox + i, oy + ly - 1, ox + i, oy + ly - 1 - val);
            if (active)
                fl_color(0, 0, 100);
            else
                fl_color(150, 150, 150);
            if (i > 0)
                fl_line(ox + i - 1, oy + ly - 2 - old, ox + i, oy + ly - 2 - val);
            old = val;
        }

        fl_line_style(FL_DASH);
        if (active)
            fl_color(0, 100, 220);
        else
            fl_color(150, 160, 170);
        fl_line(ox + lx / 2 - rbw, oy, ox + lx / 2 - rbw, oy + ly - 1);
        fl_line(ox + lx / 2 + rbw, oy, ox + lx / 2 + rbw, oy + ly - 1);
        fl_line_style(0);} {}
  }
  decl {PADnoteParameters *pars;} {public local
  }
}

class PADnoteOvertonePosition {: {public Fl_Box, private MiscFuncs}
} {
  Function {PADnoteOvertonePosition(int x,int y, int w, int h, const char *label=0):Fl_Box(x,y,w,h,label)} {} {
    code {pars=NULL;} {}
  }
  Function {init(PADnoteParameters *pars)} {} {
    code {synth = pars->getSynthEngine();
this->pars=pars;} {}
  }
  Function {draw()} {} {
    code {//
        if (!visible()) return;
        const int maxdb = 60;
        int ox = x(), oy = y(), lx = w(), ly = h();
        const int maxharmonic = 64;

        for (int i = 1; i < maxharmonic; i++)
        {
            fl_color(200, 200, 200);
            fl_line_style(FL_DOT);
            if (i % 5 == 0)
                fl_line_style(0);
            if (i % 10 == 0)
                fl_color(160, 160, 160);
            int kx = (int)(lx / (float)maxharmonic * i);
            fl_line(ox + kx, oy, ox + kx, oy + ly);
        }

        int n = synth->halfoscilsize;
        float spc[n];
        for (int i = 0; i < n; i++)
            spc[i] = 0.0;
        synth->actionLock(lock);
        pars->oscilgen->getspectrum(n, spc, 0);
        synth->actionLock(unlock);

        //normalize
        float max = 0;
        for (int i = 0; i < n; i++)
        {
            float x = fabsf(spc[i]);
            if (max < x)
                max=x;
        }
        if (max < 0.000001)
            max = 1.0;
        max = max * 1.05;

        float spectrum[lx];
        for (int i = 0; i < lx; i++)
            spectrum[i] = 0;

        for (int i = 1; i < n; i++)
        {
            float nhr = pars->getNhr(i);
            int kx = (int)(lx / (float)maxharmonic * nhr);
            if (kx < 0 || kx > lx)
                continue;
            spectrum[kx] = spc[i - 1] / max + 1e-9;
        }

        fl_color(180, 0, 0);
        fl_line_style(0);

        if (pars->Pmode == 2)
        {
            int old = 0;
            for (int i = 1; i < lx; i++)
            {
                if ((spectrum[i] > 1e-10) || (i == (lx - 1)))
                {
                    int delta = i - old;
                    float val1 = spectrum[old];
                    float val2 = spectrum[i];
                    float idelta = 1.0 / delta;
                    for (int j = 0; j < delta; j++)
                    {
                        float x = idelta * j;
                        spectrum[old + j] = val1 * (1.0 - x) + val2 * x;
                    }
                    old = i;
                }
            }
        }

        for (int i = 0; i < lx; i++)
        {
            float x = spectrum[i];
            if (x > dB2rap(-maxdb))
                x = rap2dB(x) / maxdb + 1;
            else
                continue;
            int yy = (int)(x * ly);
            fl_line(ox+i,oy+ly-1-yy,ox+i,oy+ly-1);
        }} {}
  }
  decl {PADnoteParameters *pars;} {public local
  }
  decl {SynthEngine *synth;} {private local
  }
}

class PADnoteUI {selected : {public PresetsUI_, private SynthHelper}
} {
  Function {make_window()} {} {
    Fl_Window padnotewindow {
      label {PAD synth Parameters}
      xywh {143 20 535 450} type Double hide
      code0 {o->copy_label(synth->getGuiMaster()->setPartWindowTitle("PadSynth").c_str());}
      code1 {o->position(synth->getGuiMaster()->padNoteX, synth->getGuiMaster()->padNoteY);}
    } {
      Fl_Tabs {} {
        callback {//
            if (o->value() != harmonicstructuregroup)
                applybutton->hide();
            else
                applybutton->show();}
        xywh {0 0 535 405}
      } {
        Fl_Group harmonicstructuregroup {
          label {Harmonic Structure}
          xywh {0 20 535 375} box ENGRAVED_FRAME labelsize 12
        } {
          Fl_Group bwprofilegroup {
            xywh {5 30 90 260} box ENGRAVED_FRAME
            code0 {if (pars->Pmode!=0) o->deactivate();}
          } {
            Fl_Dial hpbasepar1 {
              label Width
              callback {//
    pars->Php.base.par1 = (int) o->value();
    hprofile->redraw();
    cbwidget->do_callback();
    send_data(64, o->value(), 0xc8);}
              xywh {20 75 25 25} box ROUND_UP_BOX labelsize 10 align 1 maximum 127 step 1
              code0 {o->value(pars->Php.base.par1);}
              code1 {o->init(80);}
              class WidgetPDial
            }
            Fl_Choice hpbasetype {
              label {Base Type}
              callback {//
    pars->Php.base.type=o->value();
    hprofile->redraw();
    cbwidget->do_callback();
    send_data(69, o->value(), 0xc0);}
              xywh {15 45 75 15} down_box BORDER_BOX labelsize 10 align 5 textsize 10
              code0 {o->value(pars->Php.base.type);}
            } {
              MenuItem {} {
                label Gauss
                xywh {15 15 100 20} labelfont 1 labelsize 10
              }
              MenuItem {} {
                label Square
                xywh {25 25 100 20} labelfont 1 labelsize 10
              }
              MenuItem {} {
                label DoubleExp
                xywh {35 35 100 20} labelfont 1 labelsize 10
              }
            }
            Fl_Dial hpfreqmult {
              label FreqMlt
              callback {//
    pars->Php.freqmult=(int) o->value();
    hprofile->redraw();
    cbwidget->do_callback();
    send_data(65, o->value(), 0xc8);}
              xywh {55 75 25 25} box ROUND_UP_BOX labelsize 10 align 1 maximum 127 step 1
              code0 {o->value(pars->Php.freqmult);}
              code1 {o->init(8);}
              class WidgetPDial
            }
            Fl_Dial hpmpar1 {
              label Str
              callback {//
    pars->Php.modulator.par1=(int) o->value();
    hprofile->redraw();
    cbwidget->do_callback();
    send_data(66, o->value(), 0xc8);}
              xywh {15 115 20 20} box ROUND_UP_BOX labelsize 10 align 1 maximum 127 step 1
              code0 {o->value(pars->Php.modulator.par1);}
              code1 {o->init(0);}
              class WidgetPDial
            }
            Fl_Dial hpmfreq {
              label SFreq
              callback {//
    pars->Php.modulator.freq=(int) o->value();
    hprofile->redraw();
    cbwidget->do_callback();
    send_data(67, o->value(), 0xc8);}
              xywh {40 115 20 20} box ROUND_UP_BOX labelsize 10 align 1 maximum 127 step 1
              code0 {o->value(pars->Php.modulator.freq);}
              code1 {o->init(30);}
              class WidgetPDial
            }
            Fl_Group {} {
              xywh {10 160 80 105} box BORDER_BOX
            } {
              Fl_Choice hpamptype {
                label AmpMultiplier
                callback {//
    pars->Php.amp.type=o->value();
    hprofile->redraw();
    cbwidget->do_callback();
    send_data(73, o->value(), 0xc0);}
                xywh {15 175 70 15} down_box BORDER_BOX labelsize 10 align 5 textsize 10
                code0 {o->value(pars->Php.amp.type);}
              } {
                MenuItem {} {
                  label OFF
                  xywh {45 45 100 20} labelfont 1 labelsize 10
                }
                MenuItem {} {
                  label Gauss
                  xywh {55 55 100 20} labelfont 1 labelsize 10
                }
                MenuItem {} {
                  label Sine
                  xywh {65 65 100 20} labelfont 1 labelsize 10
                }
                MenuItem {} {
                  label Flat
                  xywh {75 75 100 20} labelfont 1 labelsize 10
                }
              }
              Fl_Choice hpampmode {
                label AmpMode
                callback {//
    pars->Php.amp.mode=o->value();
    hprofile->redraw();
    cbwidget->do_callback();
    send_data(74, o->value(), 0xc0);}
                xywh {15 205 70 15} down_box BORDER_BOX labelsize 10 align 5 textsize 10
                code0 {o->value(pars->Php.amp.mode);}
              } {
                MenuItem {} {
                  label Sum
                  xywh {60 60 100 20} labelfont 1 labelsize 10
                }
                MenuItem {} {
                  label Mult
                  xywh {70 70 100 20} labelfont 1 labelsize 10
                }
                MenuItem {} {
                  label Div1
                  xywh {80 80 100 20} labelfont 1 labelsize 10
                }
                MenuItem {} {
                  label Div2
                  xywh {90 90 100 20} labelfont 1 labelsize 10
                }
              }
              Fl_Dial hpamppar1 {
                label Par1
                callback {//
    pars->Php.amp.par1=(int) o->value();
    hprofile->redraw();
    cbwidget->do_callback();
    send_data(71, o->value(), 0xc8);}
                xywh {15 235 25 25} box ROUND_UP_BOX labelsize 10 align 1 maximum 127 step 1
                code0 {o->value(pars->Php.amp.par1);}
                code1 {o->init(80);}
                class WidgetPDial
              }
              Fl_Dial hpamppar2 {
                label Par2
                callback {//
    pars->Php.amp.par2=(int) o->value();
    hprofile->redraw();
    cbwidget->do_callback();
    send_data(72, o->value(), 0xc8);}
                xywh {55 235 25 25} box ROUND_UP_BOX labelsize 10 align 1 maximum 127 step 1
                code0 {o->value(pars->Php.amp.par2);}
                code1 {o->init(64);}
                class WidgetPDial
              }
            }
            Fl_Check_Button hpautoscale {
              label autoscale
              callback {//
    pars->Php.autoscale=(int) o->value();
    hprofile->redraw();
    cbwidget->do_callback();
    send_data(75, o->value(), 0xc0);}
              xywh {10 270 60 15} down_box DOWN_BOX labelsize 10
              code0 {o->value(pars->Php.autoscale);}
            }
            Fl_Choice hponehalf {
              callback {//
    pars->Php.onehalf=o->value();
    hprofile->redraw();
    cbwidget->do_callback();
    send_data(70, o->value(), 0xc0);}
              xywh {10 143 80 15} down_box BORDER_BOX labelsize 10 align 5 textsize 10
              code0 {o->value(pars->Php.onehalf);}
            } {
              MenuItem {} {
                label Full
                xywh {25 25 100 20} labelfont 1 labelsize 10
              }
              MenuItem {} {
                label {Upper Half}
                xywh {45 45 100 20} labelfont 1 labelsize 10
              }
              MenuItem {} {
                label {Lower Half}
                xywh {35 35 100 20} labelfont 1 labelsize 10
              }
            }
            Fl_Dial hpwidth {
              label Size
              callback {//
    pars->Php.width=(int) o->value();
    hprofile->redraw();
    cbwidget->do_callback();
    send_data(68, o->value(), 0xc8);}
              xywh {65 115 20 20} box ROUND_UP_BOX labelsize 10 align 1 maximum 127 step 1
              code0 {o->value(pars->Php.width);}
              code1 {o->init(127);}
              class WidgetPDial
            }
          }
          Fl_Group {} {
            xywh {100 155 270 135} box THIN_DOWN_BOX color 32 selection_color 71 labelcolor 179 align 6
            code0 {osc=new Oscilloscope(o->x(),o->y(),o->w(),o->h(),"");}
            code1 {osc->init(pars->oscilgen, synth);}
          } {}
          Fl_Button {} {
            label Change
            callback {//
    if (oscui!=NULL) delete (oscui);
        oscui = new OscilEditor(pars->oscilgen, osc, cbwidget, applybutton, synth, npart, kititem, 2);
    if ((Fl::event_button() == 3))
        padnotewindow->hide();}
            xywh {375 270 60 20} box THIN_UP_BOX labelfont 1 labelsize 11
          }
          Fl_Box cbwidget {
            label {Harmonic Content}
            callback {//
                overtonepos->redraw();
                applybutton->color(FL_RED);
                applybutton->redraw();}
            xywh {125 135 205 20} labelsize 12 align 16
          }
          Fl_Button {} {
            label Resonance
            callback {//
    resui->resonancewindow->redraw();
    resui->Show(false);
    resui->setcbwidget(cbwidget, applybutton);
    if ((Fl::event_button() == 3))
        padnotewindow->hide();}
            xywh {375 225 80 20} box THIN_UP_BOX labelsize 12
          }
          Fl_Dial bwdial {
            label BandWidth
            callback {//
      bwcents->value(pars->setPbandwidth((int) o->value()));
      cbwidget->do_callback();
      send_data(16, o->value(), 0xc8);}
            xywh {15 295 35 35} box ROUND_UP_BOX labelsize 10 maximum 1000 step 1
            code0 {o->value(pars->Pbandwidth);}
            code1 {if (pars->Pmode!=0) o->deactivate();}
            code2 {o->init(500);}
            code3 {o->setValueType(VC_BandWidth);}
            class WidgetPDial
          }
          Fl_Value_Output bwcents {
            label cents
            xywh {55 305 55 15} labelsize 10 align 6 maximum 10000
            code0 {o->step(0.1, 1);}
            code1 {o->value(pars->setPbandwidth(pars->Pbandwidth));}
            code2 {if (pars->Pmode!=0) o->deactivate();}
          }
          Fl_Group {} {
            xywh {315 295 215 45} box ENGRAVED_FRAME
          } {
            Fl_Choice hrpostype {
              label OvertonesPosition
              callback {//
                  pars->Phrpos.type=o->value();
                  overtonepos->redraw();
                  cbwidget->do_callback();
                  send_data(51, o->value(), 0xc0);}
              xywh {325 310 80 20} down_box BORDER_BOX labelsize 10 align 5 textsize 11
              code0 {o->value(pars->Phrpos.type);}
            } {
              MenuItem {} {
                label Harmonic
                xywh {70 70 100 20} labelfont 1 labelsize 11
              }
              MenuItem {} {
                label ShiftU
                xywh {80 80 100 20} labelfont 1 labelsize 11
              }
              MenuItem {} {
                label ShiftL
                xywh {90 90 100 20} labelfont 1 labelsize 11
              }
              MenuItem {} {
                label PowerU
                xywh {90 90 100 20} labelfont 1 labelsize 11
              }
              MenuItem {} {
                label PowerL
                xywh {100 100 100 20} labelfont 1 labelsize 11
              }
              MenuItem {} {
                label Sine
                xywh {110 110 100 20} labelfont 1 labelsize 11
              }
              MenuItem {} {
                label Power
                xywh {120 120 100 20} labelfont 1 labelsize 11
              }
            }
            Fl_Dial hrpospar1 {
              label Par1
              callback {//
    pars->Phrpos.par1=(int) o->value();
    overtonepos->redraw();
    cbwidget->do_callback();
    send_data(48, o->value(), 0xc8);}
              xywh {425 310 25 25} box ROUND_UP_BOX labelsize 10 align 1 maximum 255 step 1
              code0 {o->value(pars->Phrpos.par1);}
              code1 {o->init(64);}
              class WidgetPDial
            }
            Fl_Dial hrpospar2 {
              label Par2
              callback {//
    pars->Phrpos.par2=(int) o->value();
    overtonepos->redraw();
    cbwidget->do_callback();
    send_data(49, o->value(), 0xc8);}
              xywh {460 310 25 25} box ROUND_UP_BOX labelsize 10 align 1 maximum 255 step 1
              code0 {o->value(pars->Phrpos.par2);}
              code1 {o->init(64);}
              class WidgetPDial
            }
            Fl_Dial hrpospar3 {
              label ForceH
              callback {//
    pars->Phrpos.par3=(int) o->value();
    overtonepos->redraw();
    cbwidget->do_callback();
    send_data(50, o->value(), 0xc8);}
              xywh {495 310 25 25} box ROUND_UP_BOX labelsize 10 align 1 maximum 255 step 1
              code0 {o->value(pars->Phrpos.par3);}
              code1 {o->init(0);}
              code2 {o->setValueType(VC_percent255);}
              class WidgetPDial
            }
          }
          Fl_Choice bwscale {
            label {Bandwidth Scale}
            callback {//
    pars->Pbwscale=(int) o->value();
    cbwidget->do_callback();
    send_data(17, o->value(), 0xc0);}
            xywh {120 305 80 20} down_box BORDER_BOX labelsize 10 align 5 textsize 11
            code0 {o->value(pars->Pbwscale);}
            code1 {if (pars->Pmode!=0) o->deactivate();}
          } {
            MenuItem {} {
              label Normal
              xywh {95 95 100 20} labelfont 1 labelsize 11
            }
            MenuItem {} {
              label EqualHz
              xywh {105 105 100 20} labelfont 1 labelsize 11
            }
            MenuItem {} {
              label Quater
              xywh {115 115 100 20} labelfont 1 labelsize 11
            }
            MenuItem {} {
              label Half
              xywh {125 125 100 20} labelfont 1 labelsize 11
            }
            MenuItem {} {
              label {75%}
              xywh {135 135 100 20} labelfont 1 labelsize 11
            }
            MenuItem {} {
              label {150%}
              xywh {145 145 100 20} labelfont 1 labelsize 11
            }
            MenuItem {} {
              label Double
              xywh {145 145 100 20} labelfont 1 labelsize 11
            }
            MenuItem {} {
              label {Inv.Half}
              xywh {155 155 100 20} labelfont 1 labelsize 11
            }
          }
          Fl_Group overtonepos {
            xywh {5 345 525 45} box FLAT_BOX color 54 selection_color 218 labelcolor 63
            code0 {PADnoteOvertonePosition *opui=new PADnoteOvertonePosition(o->x(),o->y(),o->w(),o->h(),"");}
            code1 {opui->init(pars);}
          } {}
          Fl_Choice qsamplesize {
            label {Sample Size}
            callback {//
    pars->Pquality.samplesize=(int) o->value();
    cbwidget->do_callback();
    send_data(83, o->value(), 0xc0);}
            xywh {375 190 115 20} down_box BORDER_BOX labelsize 10 align 5 textsize 11
            code0 {o->value(pars->Pquality.samplesize);}
          } {
            MenuItem {} {
              label {16k (Tiny)}
              xywh {155 155 100 20} labelfont 1 labelsize 11
            }
            MenuItem {} {
              label 32k
              xywh {165 165 100 20} labelfont 1 labelsize 11
            }
            MenuItem {} {
              label {64k (Small)}
              xywh {175 175 100 20} labelfont 1 labelsize 11
            }
            MenuItem {} {
              label 128k
              xywh {185 185 100 20} labelfont 1 labelsize 11
            }
            MenuItem {} {
              label {256k (Normal)}
              xywh {205 205 100 20} labelfont 1 labelsize 11
            }
            MenuItem {} {
              label 512k
              xywh {200 200 100 20} labelfont 1 labelsize 11
            }
            MenuItem {} {
              label {1M (Big)}
              xywh {205 205 100 20} labelfont 1 labelsize 11
            }
          }
          Fl_Choice qsmpoct {
            label {smp/oct}
            callback {//
    pars->Pquality.smpoct=(int) o->value();
    cbwidget->do_callback();
    send_data(81, o->value(), 0xc0);}
            xywh {430 155 45 20} down_box BORDER_BOX labelsize 11 align 5 textsize 11
            code0 {o->value(pars->Pquality.smpoct);}
          } {
            MenuItem {} {
              label {0.5}
              xywh {10 10 100 20} labelfont 1 labelsize 11
            }
            MenuItem {} {
              label 1
              xywh {0 0 100 20} labelfont 1 labelsize 11
            }
            MenuItem {} {
              label 2
              xywh {10 10 100 20} labelfont 1 labelsize 11
            }
            MenuItem {} {
              label 3
              xywh {20 20 100 20} labelfont 1 labelsize 11
            }
            MenuItem {} {
              label 4
              xywh {30 30 100 20} labelfont 1 labelsize 11
            }
            MenuItem {} {
              label 6
              xywh {40 40 100 20} labelfont 1 labelsize 11
            }
            MenuItem {} {
              label 12
              xywh {50 50 100 20} labelfont 1 labelsize 11
            }
          }
          Fl_Choice qoct {
            label {no.oct}
            callback {//
    pars->Pquality.oct=(int) o->value();
    cbwidget->do_callback();
    send_data(82, o->value(), 0xc0);}
            xywh {480 155 45 20} down_box BORDER_BOX labelsize 11 align 5 textsize 11
            code0 {o->value(pars->Pquality.oct);}
          } {
            MenuItem {} {
              label 1
              xywh {10 10 100 20} labelfont 1 labelsize 11
            }
            MenuItem {} {
              label 2
              xywh {20 20 100 20} labelfont 1 labelsize 11
            }
            MenuItem {} {
              label 3
              xywh {30 30 100 20} labelfont 1 labelsize 11
            }
            MenuItem {} {
              label 4
              xywh {40 40 100 20} labelfont 1 labelsize 11
            }
            MenuItem {} {
              label 5
              xywh {50 50 100 20} labelfont 1 labelsize 11
            }
            MenuItem {} {
              label 6
              xywh {60 60 100 20} labelfont 1 labelsize 11
            }
            MenuItem {} {
              label 7
              xywh {70 70 100 20} labelfont 1 labelsize 11
            }
            MenuItem {} {
              label 8
              xywh {80 80 100 20} labelfont 1 labelsize 11
            }
          }
          Fl_Choice qbasenote {
            label base
            callback {//
    pars->Pquality.basenote=(int) o->value();
    cbwidget->do_callback();
    send_data(80, o->value(), 0xc0);}
            xywh {375 155 50 20} down_box BORDER_BOX labelsize 11 align 5 textsize 11
            code0 {o->value(pars->Pquality.basenote);}
          } {
            MenuItem {} {
              label {C-2}
              xywh {10 10 100 20} labelfont 1
            }
            MenuItem {} {
              label {G-2}
              xywh {20 20 100 20} labelfont 1
            }
            MenuItem {} {
              label {C-3}
              xywh {20 20 100 20} labelfont 1
            }
            MenuItem {} {
              label {G-3}
              xywh {30 30 100 20} labelfont 1
            }
            MenuItem {} {
              label {C-4}
              xywh {30 30 100 20} labelfont 1
            }
            MenuItem {} {
              label {G-4}
              xywh {40 40 100 20} labelfont 1
            }
            MenuItem {} {
              label {C-5}
              xywh {40 40 100 20} labelfont 1
            }
            MenuItem {} {
              label {G-5}
              xywh {50 50 100 20} labelfont 1
            }
            MenuItem {} {
              label {G-6}
              xywh {60 60 100 20} labelfont 1
            }
          }
          Fl_Group hprofile {
            xywh {100 45 430 90} box FLAT_BOX color 54 selection_color 218 labelcolor 63
            code0 {PADnoteHarmonicProfile *hpui=new PADnoteHarmonicProfile(o->x(),o->y(),o->w(),o->h(),"");}
            code1 {hpui->init(pars);}
            code2 {if (pars->Pmode!=0) { o->deactivate(); o->color(48);};}
          } {}
          Fl_Box {} {
            label {Profile of One Harmonic (Frequency Distribution)}
            xywh {160 25 315 20} labelsize 12
          }
          Fl_Choice spectrummode {
            label {Spectrum Mode}
            callback {//
    pars->Pmode=(int) o->value();
    if (pars->Pmode == 0)
    {
        bwprofilegroup->activate();
        bwdial->activate();
        bwcents->activate();
        hprofile->activate();
        hprofile->color(54);
        bwscale->activate();
    }
    else
    {
        bwprofilegroup->deactivate();
        bwdial->deactivate();
        bwcents->deactivate();
        hprofile->deactivate();
        hprofile->color(48);
        bwscale->deactivate();
    }
    cbwidget->do_callback();
    send_data(19, o->value(), 0xc0);}
            xywh {220 305 90 20} down_box BORDER_BOX labelfont 1 labelsize 10 align 5 textsize 11
            code0 {o->value(pars->Pmode);}
          } {
            MenuItem {} {
              label Bandwidth
              xywh {105 105 100 20} labelfont 1 labelsize 11
            }
            MenuItem {} {
              label Discrete
              xywh {125 125 100 20} labelfont 1 labelsize 11
            }
            MenuItem {} {
              label Continuous
              xywh {115 115 100 20} labelfont 1 labelsize 11
            }
          }
        }
        Fl_Group {} {
          label {Envelopes&LFOs}
          xywh {0 20 535 385} box ENGRAVED_BOX labelsize 12 hide
        } {
          Fl_Group {} {
            label FREQUENCY
            xywh {5 275 525 125} box THIN_UP_BOX labelfont 1 labelsize 12 align 17
          } {
            Fl_Group freqenv {
              label {PADSynth - Frequency Envelope}
              xywh {10 325 205 70} box FLAT_BOX color 51 labelsize 12 align 144
              code0 {o->init(pars->FreqEnvelope, npart, kititem, 2, 1);}
              class EnvelopeUI
            } {}
            Fl_Counter octave {
              label Octave
              callback {//
    int k=(int) o->value();
    if (k<0)
        k+=16;
    pars->PCoarseDetune = k*1024+
    pars->PCoarseDetune%1024;
    send_data(35, o->value(), 0xc0);}
              tooltip Octave xywh {465 305 45 15} type Simple labelsize 10 align 1 minimum -8 maximum 7 step 1 textfont 1 textsize 11
              code0 {int k=pars->PCoarseDetune/1024;}
              code1 {if (k>=8) k-=16;}
              code2 {o->value(k);}
            }
            Fl_Counter coarsedet {
              label {Coarse det.}
              callback {//
    int k = (int) o->value();
    if (k < 0)
        k += 1024;
    pars->PCoarseDetune = k + (pars->PCoarseDetune / 1024) * 1024;
    send_data(37, o->value(), 0xc0);}
              tooltip {Coarse Detune} xywh {455 375 60 20} labelsize 10 align 5 minimum -64 maximum 63 step 1 textfont 1 textsize 11
              code0 {int k=pars->PCoarseDetune%1024;}
              code1 {if (k>=512) k-=1024;}
              code2 {o->value(k);}
              code3 {o->lstep(10);}
            }
            Fl_Group freqlfo {
              label {Frequency LFO     }
              xywh {215 325 230 70} box FLAT_BOX color 47 labelsize 12 align 144
              code0 {o->init(pars->FreqLfo, npart, kititem, 2, 1);}
              class LFOUI
            } {}
            Fl_Slider detune {
              callback {//
    if (Fl::event_button() == 3)
        o->value(0);
    pars->PDetune = (int)o->value() + 8192;
    detunevalueoutput->do_callback();
    send_data(32, o->value(), 0xc8);}
              tooltip {Fine Detune (cents)} xywh {57 305 388 15} type {Horz Knob} box THIN_DOWN_BOX minimum -8192 maximum 8191 step 1
              code0 {o->value(pars->PDetune-8192);}
              class mwheel_slider_rev
            }
            Fl_Value_Output detunevalueoutput {
              label Detune
              callback {o->value(getDetune(pars->PDetuneType,0,pars->PDetune));}
              xywh {12 305 45 15} labelsize 10 align 5 minimum -5000 maximum 5000 textfont 1 textsize 10
              code0 {o->step(0.01, 1);}
              code1 {o->value(getDetune(pars->PDetuneType,0,pars->PDetune));}
            }
            Fl_Choice detunetype {
              label {Detune Type}
              callback {//
    pars->PDetuneType = (int) o->value() + 1;
    detunevalueoutput->do_callback();
    send_data(36, o->value() + 1, 0xc0);}
              xywh {450 345 75 15} down_box BORDER_BOX labelsize 10 align 5 textfont 1 textsize 10
              code0 {o->add("L35cents");o->add("L10cents");o->add("E100cents");o->add("E1200cents");}
              code1 {o->value(pars->PDetuneType-1);}
            } {}
            Fl_Check_Button hz440 {
              label 440Hz
              callback {//
    int x = (int) o->value();
    pars->Pfixedfreq = x;
    if (x == 0)
        fixedfreqetdial->deactivate();
    else
        fixedfreqetdial->activate();
    send_data(34, x, 0xc0);}
              tooltip {set the base frequency to 440Hz} xywh {365 284 50 15} down_box DOWN_BOX labelfont 1 labelsize 10
              code0 {o->value(pars->Pfixedfreq);}
            }
            Fl_Dial fixedfreqetdial {
              label {Eq.T.}
              callback {pars->PfixedfreqET=(int) o->value();
send_data(33, o->value(), 0xc8);}
              tooltip {How the frequency varies according to the keyboard (leftmost for fixed frequency)} xywh {420 280 20 20} box ROUND_UP_BOX labelsize 10 align 8 maximum 127 step 1
              code0 {o->value(pars->PfixedfreqET);}
              code1 {if (pars->Pfixedfreq==0) o->deactivate();}
              code2 {o->init(0);}
              code3 {o->setValueType(VC_FixedFreqET);}
              class WidgetPDial
            }
            Fl_Dial bend {
              label Bend
              callback {pars->PBendAdjust = lrint(o->value());
send_data(38, o->value(), 0xc8);}
              tooltip {Pitch bend range scaling} xywh {80 280 20 20} box ROUND_UP_BOX labelsize 10 align 8 maximum 127 step 1
              code0 {o->value(pars->PBendAdjust);}
              code1 {o->init(88);}
	      code2 {o->setValueType(VC_PitchBend);}
              class WidgetPDial
            }
            Fl_Dial offset {
              label Offset
              callback {pars->POffsetHz = lrint(o->value());
send_data(39, o->value(), 0xc8);}
              tooltip {Offset of the frequency in Hz.} xywh {140 280 20 20} box ROUND_UP_BOX labelsize 10 align 8 maximum 127 step 1
              code0 {o->value(pars->POffsetHz);}
              code1 {o->init(64);}
              code2 {o->setValueType(VC_FreqOffsetHz);}
              class WidgetPDial
            }
          }
          Fl_Group {} {
            label AMPLITUDE
            xywh {5 25 240 250} box THIN_UP_FRAME labelfont 1 labelsize 12 align 17
          } {
            Fl_Dial volume {
              label Volume
              callback {pars->PVolume=(int)o->value();
send_data(0, o->value(), 0xc8);}
              tooltip Volume xywh {24 42 34 34} box ROUND_UP_BOX labelsize 10 maximum 127 step 1
              code0 {o->setValueType(VC_InstrumentVolume);}
              code1 {o->value(pars->PVolume);}
              code2 {o->init(90);}
              class WidgetPDial
            }
            Fl_Dial vsns {
              label {Vel Sens}
              callback {pars->PAmpVelocityScaleFunction=(int) o->value();
send_data(1, o->value(), 0xc8);}
              tooltip {Velocity Sensing Function (rightmost to disable)} xywh {102 42 34 34} box ROUND_UP_BOX labelsize 10 maximum 127 step 1
              code0 {o->value(pars->PAmpVelocityScaleFunction);}
              code1 {o->init(64);}
              code2 {o->setValueType(VC_AmpVelocitySense);}
              class WidgetPDial
            }
            Fl_Dial pan {
              label Pan
              callback {//
    pars->setPan((char)o->value());
    randompan->value(o->value() < 1);
    send_data(2, o->value(), 0xc8);}
              tooltip {Panning - leftmost/zero is Random} xywh {175 42 34 34} box ROUND_UP_BOX labelsize 10 align 6 maximum 127 step 1
              code0 {o->setValueType(VC_PanningRandom);}
              code1 {o->value(pars->PPanning);}
              code2 {o->init(64);}
              class WidgetPDial
            }
            Fl_Light_Button randompan {
              label Rand
              callback {//
    pan->value(0);
    pars->setPan(0);
    o->value(1);
    send_data(2, 0, 0xc0);}
              tooltip {Random panning On/Off} xywh {197 77 7 13} box NO_BOX color 35 selection_color 88 labelsize 10 align 72
              code0 {o->value(pars->randomPan());}
            }
            Fl_Dial dpop {
              label {D.Pop}
              callback {pars->Fadein_adjustment = (int) o->value();
send_data(120, o->value(), 0xc8);}
              tooltip {Pop Suppression} xywh {85 247 25 25} box ROUND_UP_BOX labelsize 10 align 1 maximum 127 step 1
              code0 {o->value(pars->Fadein_adjustment);}
              code1 {o->init(20);}
              class WidgetPDial
            }
            Fl_Dial pstr {
              label {P.Str.}
              callback {pars->PPunchStrength = (int) o->value();
send_data(121, o->value(), 0xc8);}
              tooltip {Punch Strength} xywh {125 247 25 25} box ROUND_UP_BOX labelsize 10 align 1 maximum 127 step 1
              code0 {o->value(pars->PPunchStrength);}
              code1 {o->init(0);}
              class WidgetPDial
            }
            Fl_Dial pt {
              label {P.t.}
              callback {pars->PPunchTime=(int) o->value();
send_data(122, o->value(), 0xc8);}
              tooltip {Punch Time (duration)} xywh {155 247 25 25} box ROUND_UP_BOX labelsize 10 align 1 maximum 127 step 1
              code0 {o->value(pars->PPunchTime);}
              code1 {o->init(60);}
              class WidgetPDial
            }
            Fl_Dial pstc {
              label {P.Stc.}
              callback {pars->PPunchStretch=(int) o->value();
send_data(123, o->value(), 0xc8);}
              tooltip {Punch Stretch} xywh {185 247 25 25} box ROUND_UP_BOX labelsize 10 align 1 maximum 127 step 1
              code0 {o->value(pars->PPunchStretch);}
              code1 {o->init(64);}
              class WidgetPDial
            }
            Fl_Dial pvel {
              label {P.Vel.}
              callback {pars->PPunchVelocitySensing=(int) o->value();
send_data(124, o->value(), 0xc8);}
              tooltip {Punch Velocity Sensing} xywh {215 247 25 25} box ROUND_UP_BOX labelsize 10 align 1 maximum 127 step 1
              code0 {o->value(pars->PPunchVelocitySensing);}
              code1 {o->init(72);}
              class WidgetPDial
            }
            Fl_Group ampenv {
              label {PADSynth - Amplitude Envelope} open
              xywh {10 95 205 70} box FLAT_BOX color 51 labelsize 12 align 144
              code0 {o->init(pars->AmpEnvelope, npart, kititem, 2, 0);}
              class EnvelopeUI
            } {}
            Fl_Group amplfo {
              label {Amplitude LFO     } open
              xywh {10 165 230 70} box FLAT_BOX color 47 labelfont 1 labelsize 12 align 144
              code0 {o->init(pars->AmpLfo, npart, kititem, 2, 0);}
              class LFOUI
            } {}
            Fl_Check_Button stereo {
              label Stereo
              callback {pars->PStereo =(o->value()) ? true : false; hprofile->redraw();
send_data(112, o->value(), 0xc0);}
              xywh {15 245 65 25} down_box DOWN_BOX labelsize 11
              code0 {o->value(pars->PStereo);}
            }
          }
          Fl_Group {} {
            label FILTER
            xywh {245 25 285 250} box THIN_UP_BOX labelfont 1 labelsize 12 align 17
          } {
            Fl_Group filterenv {
              label {PADSynth - Filter Envelope}
              xywh {250 130 275 70} box FLAT_BOX color 51 labelsize 12 align 144
              code0 {o->init(pars->FilterEnvelope, npart, kititem, 2, 2);}
              class EnvelopeUI
            } {}
            Fl_Group filterlfo {
              label {Filter LFO     }
              xywh {250 200 230 70} box FLAT_BOX color 47 labelfont 1 labelsize 12 align 144
              code0 {o->init(pars->FilterLfo, npart, kititem, 2, 2);}
              class LFOUI
            } {}
            Fl_Group filterui {
              label {PADsynth - Filter}
              xywh {250 55 275 75} box FLAT_BOX color 50 labelsize 12 align 144
              code0 {o->init(pars->GlobalFilter,&pars->PFilterVelocityScale,&pars->PFilterVelocityScaleFunction, npart, kititem, 2);}
              class FilterUI
            } {}
          }
        }
      }
      Fl_Button applybutton {
        label {Apply Changes}
        callback {//
            pars->applyparameters(false);
            o->color(FL_GRAY);
            if (oscui)
            {
                oscui->applybutton->color(FL_GRAY);
                oscui->applybutton->redraw();
            }
            if (resui)
            {
                resui->applybutton->color(FL_GRAY);
                resui->applybutton->redraw();
            }
            send_data(104, o->value(), 0xc0);}
        xywh {324 410 123 24} box THIN_UP_BOX labelfont 1 labelsize 12
        code0 {o->color(FL_RED);}
      }
      Fl_Button {} {
        label Close
        callback {synth->getGuiMaster()->padNoteX = padnotewindow->x();
synth->getGuiMaster()->padNoteY = padnotewindow->y();
padnotewindow->hide();
if ((Fl::event_button() == 3))
{
    if (synth->getGuiMaster()->partui->partKitOn)
        synth->getGuiMaster()->partui->instrumentkitlist->show();
    else
        synth->getGuiMaster()->partui->instrumenteditwindow->show();
}}
        xywh {466 410 61 24} box THIN_UP_BOX labelfont 1 labelsize 12
      }
      Fl_Button {} {
        label C
        callback {synth->getGuiMaster()->getPresetsUi()->copy(pars);}
        xywh {205 430 25 15} box THIN_UP_BOX color 179 labelfont 1 labelsize 11 labelcolor 7
      }
      Fl_Button {} {
        label P
        callback {synth->getGuiMaster()->getPresetsUi()->paste(pars,this);}
        xywh {235 430 25 15} box THIN_UP_BOX color 179 labelfont 1 labelsize 11 labelcolor 7
      }
      Fl_Button {} {
        label Export
        callback {char *filename;
filename=fl_file_chooser("Export samples:","(*.wav)",NULL,0);
if (filename==NULL) return;
fl_filename_setext(filename,"");



pars->export2wav(filename);}
        tooltip {Export samples as wav file} xywh {15 410 123 24} box THIN_UP_BOX color 51 labelfont 1 labelsize 12 align 128
      }
    }
  }
  Function {send_data(int control, float value, int type)} {} {
    code {//
collect_data(synth, value, (Fl::event_button() | type), control, npart, kititem, 2);} {}
  }
  Function {returns_update(CommandBlock *getData)} {} {
    code {//
    float value = getData->data.value;
    //unsigned char type = getData->data.type;
    unsigned char control = getData->data.control;
    //unsigned char npart = getData->data.part;
    //int tmp;
    float result;

    switch(control)
    {
    	case 0:
    	    volume->value(value);
    	    break;

    	case 1:
    	    vsns->value(value);
    	    break;

    	case 2:
    	    pan->value(value);
    	    randompan->value(value == 0);
    	    break;

    	case 16:
    	    bwdial->value(value);
    	    result = powf(value / 1000.0f, 1.1f);
            result = powf(10.0f, result * 4.0f) * 0.25f;
    	    bwcents->value(result);
    	    cbwidget->do_callback();
    	    break;

    	case 17:
    	    bwscale->value((int) value);
    	    cbwidget->do_callback();
    	    break;

    	case 19:
    	    spectrummode->value((int) value);
    	    if (pars->Pmode == 0)
            {
                bwprofilegroup->activate();
                bwdial->activate();
                bwcents->activate();
                hprofile->activate();
                hprofile->color(54);
                bwscale->activate();
            }
            else
            {
                bwprofilegroup->deactivate();
                bwdial->deactivate();
                bwcents->deactivate();
                hprofile->deactivate();
                hprofile->color(48);
                bwscale->deactivate();
            }
            cbwidget->do_callback();
    	    break;

    	case 32:
    	    detune->value((int) value);
    	    detunevalueoutput->do_callback();
    	    break;

    	case 33:
    	    fixedfreqetdial->value((int) value);
    	    break;

    	case 34:
    	    hz440->value(value != 0);
    	    if (value == 0)
                fixedfreqetdial->deactivate();
            else
                fixedfreqetdial->activate();
    	    break;

    	case 35:
    	    octave->value((int) value);
    	    break;

    	case 36:
    	    detunetype->value((int) value);
    	    break;

    	case 37:
    	    coarsedet->value((int) value);
    	    break;

    	case 38:
    	    bend->value((int) value);
    	    break;

    	case 39:
    	    offset->value((int) value);
    	    break;

    	case 48:
    	    hrpospar1->value((int) value);
    	    break;

    	case 49:
    	    hrpospar2->value((int) value);
    	    break;

    	case 50:
    	    hrpospar3->value((int) value);
    	    break;

    	case 51:
    	    hrpostype->value((int) value);
    	    break;

    	case 64:
    	    hpbasepar1->value((int) value);
    	    hprofile->redraw();
            cbwidget->do_callback();

    	    break;

    	case 65:
    	    hpfreqmult->value((int) value);
    	    hprofile->redraw();
    	    cbwidget->do_callback();
    	    break;

    	case 66:
    	    hpmpar1->value((int) value);
    	    hprofile->redraw();
    	    cbwidget->do_callback();
    	    break;

    	case 67:
    	    hpmfreq->value((int) value);
    	    hprofile->redraw();
    	    cbwidget->do_callback();
    	    break;

    	case 68:
    	    hpwidth->value((int) value);
    	    hprofile->redraw();
    	    cbwidget->do_callback();
    	    break;

    	case 69:
    	    hpbasetype->value((int) value);
    	    hprofile->redraw();
    	    cbwidget->do_callback();
    	    break;

    	case 70:
    	    hponehalf->value((int) value);
    	    hprofile->redraw();
    	    cbwidget->do_callback();
    	    break;

    	case 71:
    	    hpamppar1->value(value);
    	    hprofile->redraw();
    	    cbwidget->do_callback();
    	    break;

    	case 72:
    	    hpamppar2->value(value);
    	    hprofile->redraw();
    	    cbwidget->do_callback();
    	    break;

    	case 73:
    	    hpamptype->value((int) value);
    	    hprofile->redraw();
    	    cbwidget->do_callback();
    	    break;

    	case 74:
    	    hpampmode->value((int) value);
    	    hprofile->redraw();
    	    cbwidget->do_callback();
    	    break;

    	case 75:
    	    hpautoscale->value((int) value);
    	    hprofile->redraw();
    	    cbwidget->do_callback();
    	    break;

    	case 80:
    	    qbasenote->value((int) value);
    	    cbwidget->do_callback();
    	    break;

    	case 81:
    	    qsmpoct->value((int) value);
    	    cbwidget->do_callback();
    	    break;

    	case 82:
    	    qoct->value((int) value);
    	    cbwidget->do_callback();
    	    break;

    	case 83:
    	    qsamplesize->value((int) value);
    	    cbwidget->do_callback();
    	    break;

    	case 104:
    	    applybutton->color(FL_GRAY);
    	    applybutton->redraw();
            if (oscui)
            {
                oscui->applybutton->color(FL_GRAY);
                oscui->applybutton->redraw();
            }
            if (resui)
            {
                resui->applybutton->color(FL_GRAY);
                resui->applybutton->redraw();
            }
            break;

    	case 112:
    	    stereo->value(value != 0);
    	    break;

    	case 120:
    	    dpop->value(value);
    	    break;

    	case 121:
    	    pstr->value(value);
    	    break;

    	case 122:
    	    pt->value(value);
    	    break;

    	case 123:
    	    pstc->value(value);
    	    break;

    	case 124:
    	    pvel->value(value);
    	    break;

    }
    Fl::check();} {}
  }
  Function {PADnoteUI(PADnoteParameters *parameters, int npart_, int kititem_)} {} {
    code {//
	synth = parameters->getSynthEngine();
        pars = parameters;
        npart = npart_;
        kititem = kititem_;
        oscui = NULL;
        resui = new ResonanceUI(pars->resonance, npart, kititem, 2);
        make_window();} {}
  }
  Function {refresh(void)} {} {
    code {//
        volume->value(pars->PVolume);
        vsns->value(pars->PAmpVelocityScaleFunction);
        pan->value(pars->PPanning);
        stereo->value((pars->PStereo) ? 1 : 0);

        pstr->value(pars->PPunchStrength);
        pt->value(pars->PPunchTime);
        pstc->value(pars->PPunchStretch);
        pvel->value(pars->PPunchVelocitySensing);

        detunevalueoutput->value(getDetune(pars->PDetuneType,0,pars->PDetune));
        detune->value(pars->PDetune-8192);

        int k=pars->PCoarseDetune/1024;if (k>=8) k-=16;
        octave->value(k);

        detunetype->value(pars->PDetuneType-1);
        k=pars->PCoarseDetune%1024;if (k>=512) k-=1024;
        coarsedet->value(k);

        hz440->value(pars->Pfixedfreq);
        fixedfreqetdial->value(pars->PfixedfreqET);

        amplfo->refresh();
        freqlfo->refresh();
        filterlfo->refresh();

        ampenv->refresh();
        freqenv->refresh();
        filterenv->refresh();
        filterui->refresh();

        /* harmonic structure parametrs */

        resui->refresh();
        if (oscui!=NULL) oscui->refresh();

        hpbasetype->value(pars->Php.base.type);
        hpbasepar1->value(pars->Php.base.par1);
        hpfreqmult->value(pars->Php.freqmult);

        hpmpar1->value(pars->Php.modulator.par1);
        hpmfreq->value(pars->Php.modulator.freq);
        hpwidth->value(pars->Php.width);

        hponehalf->value(pars->Php.onehalf);
        hpamptype->value(pars->Php.amp.type);
        hpampmode->value(pars->Php.amp.mode);
        hpamppar1->value(pars->Php.amp.par1);
        hpamppar2->value(pars->Php.amp.par2);
        hpautoscale->value(pars->Php.autoscale);

        bwdial->value(pars->Pbandwidth);
        if (pars->Pmode==0)
        {
           bwprofilegroup->activate();
           bwdial->activate();
           bwcents->activate();
           hprofile->activate();
           hprofile->color(54);
           bwscale->activate();
        }
        else
        {
           bwprofilegroup->deactivate();
           bwdial->deactivate();
           bwcents->deactivate();
           hprofile->deactivate();
           hprofile->color(48);
           bwscale->activate();
        }

        spectrummode->value(pars->Pmode);

        qbasenote->value(pars->Pquality.basenote);
        qsmpoct->value(pars->Pquality.smpoct);
        qoct->value(pars->Pquality.oct);
        qsamplesize->value(pars->Pquality.samplesize);

        hrpostype->value(pars->Phrpos.type);
        hrpospar1->value(pars->Phrpos.par1);
        hrpospar2->value(pars->Phrpos.par2);
        hrpospar3->value(pars->Phrpos.par3);

        hprofile->redraw();
        overtonepos->redraw();

        osc->redraw();
        pars->applyparameters(false);
        applybutton->color(FL_GRAY);
        applybutton->parent()->redraw();} {}
  }
  Function {~PADnoteUI()} {return_type virtual
  } {
    code {//
        delete(oscui);
        delete(resui);

        padnotewindow->hide();
        delete(padnotewindow);} {}
  }
  decl {PADnoteParameters *pars;} {public local
  }
  decl {OscilEditor *oscui;} {public local
  }
  decl {Oscilloscope *osc;} {public local
  }
  decl {ResonanceUI *resui;} {public local
  }
  decl {SynthEngine *synth;} {private local
  }
  decl {int npart;} {private local
  }
  decl {int kititem;} {private local
  }
}
